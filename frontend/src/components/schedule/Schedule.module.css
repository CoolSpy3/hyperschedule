.container {
    margin: 1rem;

    display: grid;
    grid-template-areas: "blank days" "times main";
    grid-gap: 0.5rem;

    grid-template-rows: auto 1fr;
    grid-template-columns: auto 1fr;

    &:not(.showSunday) {
        & .dayLabelViewport .labelGrid {
            transform: translateX(calc(-100% / 7));
        }

        & .grid {
            transform: translate(calc(-100% / 7), var(--translateY));
        }
    }
    &.showSunday .grid {
        transform: translateY(var(--translateY));
    }

    &.showSaturday {
    }
}

.timeLabelViewport {
    grid-area: times;

    text-align: right;
    font-size: 0.875rem;
    color: var(--fg-1);
    overflow: hidden;

    & .labelGrid {
        display: grid;
        grid-template-rows: repeat(24, 1fr);

        height: calc(24 / (var(--end-hour) - var(--start-hour)) * 100%);
        position: relative;
        transform: translateY(calc(var(--start-hour) / 24 * -100%));
    }

    & div {
        height: 0;
    }
}

.dayLabelViewport {
    grid-area: days;
    text-align: center;
    overflow: hidden;

    & .labelGrid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);

        position: relative;
    }
}

.labelGrid,
.grid {
    transition: transform var(--misc-transition-duration),
        width var(--misc-transition-duration),
        height var(--misc-transition-duration),
        background-color var(--theme-transition-duration);
}

.dayLabelViewport .labelGrid,
.grid {
    @nest .container.showSunday.showSaturday & {
        width: 100%;
    }
    @nest .container.showSunday:not(.showSaturday) &,
        .container.showSaturday:not(.showSunday) & {
        width: calc(7 / 6 * 100%);
    }
    @nest .container:not(.showSunday):not(.showSaturday) & {
        width: calc(7 / 5 * 100%);
    }
}

.viewport {
    grid-area: main;

    overflow: hidden;

    border-radius: 0.25rem;

    position: relative;
}

.grid {
    display: grid;

    position: absolute;
    top: 0;
    left: 0;

    transition: transform var(--misc-transition-duration),
        width var(--misc-transition-duration),
        height var(--misc-transition-duration),
        background-color var(--theme-transition-duration);

    background-color: var(--bg-1);
    grid-template-areas: "U M T W R F S";
    grid-template-rows: repeat(calc(24 * 12), 1fr);

    height: calc(24 / (var(--end-hour) - var(--start-hour)) * 100%);

    --translateY: calc(var(--start-hour) / 24 * -100%);

    grid-template-columns: repeat(7, 1fr);

    & .rowLine {
        grid-column: 1 / -1;

        &.noon,
        &.evening {
            //border-top: 1px solid var(--bg-3);
        }
    }

    & .expandOutline {
        margin: 0.125rem;
        outline: 2px dashed var(--highlight);
        background-color: color-mix(
            in srgb,
            var(--highlight) 25%,
            var(--highlight-transparent)
        );
        border-radius: 0.25rem;
        z-index: 2;
    }
}

.card {
    background: var(--section-color);
    font-size: 0.75rem;
    border-radius: 0.25rem;
    padding: 0.125rem 0.25rem;
    margin: 0.125rem;
    text-align: center;
    cursor: pointer;

    writing-mode: vertical-rl;

    border: 1px solid transparent;
    transition: margin var(--misc-transition-duration);

    margin-left: calc(0.25rem + 0.5rem * var(--stack-order));
    //margin-top: calc(0.25rem * var(--stack-order));
    margin-right: calc(0.25rem + 1.5rem * var(--reverse-stack-order));
    //margin-bottom: calc(0.25rem * var(--reverse-stack-order));

    z-index: var(--reverse-stack-order);


    //box-shadow: 0 0 calc(max(0.1rem * var(--reverse-stack-order),1px)) var(--section-shadow);

    // this thing is 1px becuase this is actually standard-deviation, the same scale as gausian blur
    // https://drafts.fxtf.org/filter-effects/#funcdef-filter-drop-shadow

    filter: drop-shadow(0 0 calc(1px * var(--reverse-stack-order)) var(--section-shadow))
            opacity(var(--opacity)) ;

    box-sizing: border-box;
    &:hover{
        box-shadow: 0 0 0.2em var(--section-shadow);
        filter: drop-shadow(0 0 calc(1px * var(--reverse-stack-order)) var(--section-shadow));
    }

    &.highlight {
        border-color: var(--highlight);
    }
}
