.container {
    margin: 1em 0.5em;

    display: grid;
    grid-template-areas: "blank days" "times main";
    grid-gap: 0.5rem;

    grid-template-rows: auto 1fr;
    grid-template-columns: auto 1fr;

    &:not(.showSunday) {
        & .dayLabelViewport .labelGrid {
            transform: translateX(calc(-100% / 7));
        }

        & .grid {
            transform: translate(calc(-100% / 7), var(--translateY));
        }
    }

    &.showSunday .grid {
        transform: translateY(var(--translateY));
    }

    &.showSaturday {
    }
}

.timeLabelViewport {
    grid-area: times;

    text-align: right;
    font-size: 0.875rem;
    color: var(--fg-1);
    overflow: hidden;

    & .labelGrid {
        display: grid;
        grid-template-rows: repeat(24, 1fr);

        height: calc(24 / (var(--end-hour) - var(--start-hour)) * 100%);
        position: relative;
        transform: translateY(calc(var(--start-hour) / 24 * -100%));

        & .offsetY {
            transform: translateY(-0.625em);
        }
    }

    & div {
        height: 0;
    }
}

.dayLabelViewport {
    grid-area: days;
    text-align: center;
    overflow: hidden;

    & .labelGrid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);

        position: relative;
    }
}

.labelGrid,
.grid {
    transition:
        transform var(--misc-transition-duration),
        width var(--misc-transition-duration),
        height var(--misc-transition-duration),
        background-color var(--theme-transition-duration);
}

.dayLabel {
    &::after {
        content: var(--labelShort);
        @media (--medium-and-up) {
            content: var(--label);
        }
    }
}

.dayLabelViewport .labelGrid,
.grid {
    .container.showSunday.showSaturday & {
        width: 100%;
    }

    .container.showSunday:not(.showSaturday) &,
    .container.showSaturday:not(.showSunday) & {
        width: calc(7 / 6 * 100%);
    }

    .container:not(.showSunday):not(.showSaturday) & {
        width: calc(7 / 5 * 100%);
    }
}

.viewport {
    grid-area: main;

    overflow: hidden;

    border-radius: 0.25rem;

    position: relative;
}

.grid {
    display: grid;

    position: absolute;
    top: 0;
    left: 0;

    transition:
        transform var(--misc-transition-duration),
        width var(--misc-transition-duration),
        height var(--misc-transition-duration),
        background-color var(--theme-transition-duration);

    background-color: var(--bg-1);
    grid-template-areas: "U M T W R F S";
    grid-template-rows: repeat(calc(24 * 12), 1fr);

    height: calc(24 / (var(--end-hour) - var(--start-hour)) * 100%);

    --translateY: calc(var(--start-hour) / 24 * -100%);

    grid-template-columns: repeat(7, calc(100% / 7));

    & .rowLine {
        grid-column: 1 / -1;

        &.noon,
        &.evening {
        }
    }

    & .expandOutline {
        margin: 0.125rem;
        outline: 2px dashed var(--highlight);
        background-color: color-mix(
            in srgb,
            var(--highlight) 25%,
            var(--highlight-transparent)
        );
        border-radius: 0.25rem;
        z-index: 2;
    }
}

.card {
    background: var(--section-color);
    font-size: 0.75rem;
    border-radius: 0.25rem;
    padding: 0.25rem;
    margin: 0.125rem;
    text-align: center;
    cursor: pointer;

    overflow: clip;

    /*
    writing-mode: vertical-rl;
    */

    border: 1px solid transparent;
    transition:
        margin var(--misc-transition-duration),
        grid-template-rows var(--misc-transition-duration);

    /*color: color-mix(
        in srgb,
        var(--fg-0) calc(100% * (1 - min(var(--stack-order), 1))),
        transparent
    );
    */

    &[data-conflict] {
        visibility: hidden;
    }

    /*
    we use hover class here instead of :hover because they can be triggered by hovering over different
    card from the same section
    */

    &.hover {
        background-color: var(--section-highlight);
        filter: drop-shadow(0 0 0.125em var(--section-shadow));
    }

    &.highlight {
        border-color: var(--highlight);
    }

    display: grid;
    grid-template-areas: "gap-top" "code" "title" "gap-middle" "location" "gap-bottom" "half";
    grid-template-rows: 1fr auto auto minmax(0, 1.5em) auto 1fr auto;
    grid-template-columns: 100%;

    & .code {
        grid-area: code;
        font-weight: 600;
        white-space: nowrap;

        overflow: clip;
        text-overflow: ellipsis;
    }

    & .title {
        grid-area: title;
        align-self: center;
    }

    & .location {
        grid-area: location;
    }

    & .half {
        grid-area: half;
    }

    &.firstHalf,
    &.secondHalf {
        /* exclude margin-left and margin-right, which is 0.125em each */
        width: calc(50% - 0.25em);
    }

    &.secondHalf {
        transform: translateX(calc(100% + 0.125em));
    }
}

[data-show-conflict] .card {
    --offset-x: calc((40% - 0.25em) / var(--group-size));

    margin-left: calc(0.125em + var(--stack-order) * var(--offset-x));
    margin-right: calc(0.125em + var(--reverse-stack-order) * var(--offset-x));

    z-index: var(--reverse-stack-order);

    opacity: calc(1 - 0.5 * (var(--reverse-stack-order)) / var(--group-size));

    &[data-conflict] {
        visibility: inherit;
    }

    &.firstHalf,
    &.secondHalf {
        transform: unset;
        width: unset;
    }

    filter: drop-shadow(
        0 0 calc(0.125em * (var(--reverse-stack-order))) var(--section-shadow)
    );

    &.hover {
        filter: drop-shadow(
            0 0 calc(0.125em * (var(--group-size) + 1)) var(--section-shadow)
        );
        z-index: 50;
        opacity: 1;
    }
}
